#!/bin/bash

set -xeuo pipefail

# do not run this during the pipeline upload
if [ "$BUILDKITE_LABEL" == ":pipeline:" ]; then
    exit 0
fi

echo "~~~ Testing ${CLOUD_PROVIDER}"

mkdir -p .local/bin
PATH="$(realpath .local/bin):${PATH}"
CLUSTER_BASE_NAME="buildkite-${BUILDKITE_BUILD_NUMBER}"

# dump the kind state on exit
kind_dump() {
    echo ~~~ KIND dump on exit

    local DUMP="/tmp/kind-${BUILDKITE_BUILD_NUMBER}"
    local TAR="${DUMP}.tar.gz"
    unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    unset GCP_B64ENCODED_CREDENTIALS PROJECT_ID GOOGLE_APPLICATION_CREDENTIALS
    kind export logs -n bootstrap "${DUMP}"
    tar czf "${TAR}" -C "${DUMP}" .
    buildkite-agent artifact upload "${TAR}"
}

# install task
curl -Ls https://github.com/go-task/task/releases/download/v3.24.0/task_linux_amd64.tar.gz | tar xzv -C .local/bin task

task --parallel tool:kind tool:helm tool:kubectl tool:ct tool:support-bundle

test_eks() {
    echo ~~~ Start EKS variant

    AWS_ACCESS_KEY_ID="$HELMCHART_TEST_ACCOUNT_AWS_ACCESS_KEY_ID"
    AWS_SECRET_ACCESS_KEY="$HELMCHART_TEST_ACCOUNT_AWS_SECRET_ACCESS_KEY"
    AWS_REGION=us-west-2
    TEST_BUCKET="cloud-sandbox-buildkite-${BUILDKITE_BUILD_NUMBER}"
    export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION TEST_BUCKET

    task tool:aws

    # create s3 bucket for tiered storage
    aws s3api create-bucket --bucket "${TEST_BUCKET}" \
        --region "${AWS_REGION}" --create-bucket-configuration "LocationConstraint=${AWS_REGION}"\
        --object-ownership BucketOwnerEnforced

    trap kind_dump EXIT

    # create eks cluster
    # this is very expensive (about an hour). Add new commands above this, not after.
    task capi-create-eks CLUSTER_NAME="buildkite-${BUILDKITE_BUILD_NUMBER}"

    KUBECONFIG=.local/kubeconfig clusterctl get kubeconfig "buildkite-${BUILDKITE_BUILD_NUMBER}-eks-cluster" > ".local/buildkite-${BUILDKITE_BUILD_NUMBER}-eks-cluster.conf"
    KUBECONFIG=$(realpath ".local/buildkite-${BUILDKITE_BUILD_NUMBER}-eks-cluster.conf")
    export KUBECONFIG

    envsubst < ./charts/redpanda/ci/21-eks-tiered-storage-with-creds-values.yaml.tpl > ./charts/redpanda/ci/21-eks-tiered-storage-with-creds-values.yaml
}

test_gke() {
    echo ~~~ Start GKE variant

    CI=true
    PROJECT_ID="$HELMCHART_TEST_PROJECT_ID"

    TEST_BUCKET="cloud-sandbox-buildkite-${BUILDKITE_BUILD_NUMBER}"
    TEST_SA_NAME="redpanda-bucket-sa-${BUILDKITE_BUILD_NUMBER}"

    export CI PROJECT_ID TEST_BUCKET TEST_SA_NAME

    task tool:gcloud tool:auth-gcp

    gcloud iam service-accounts create "${TEST_SA_NAME}" \
         --description="Service account which will be assigned to Redpanda cluster for Tiered Storage" \
         --display-name="${TEST_SA_NAME}" \
         --project "${PROJECT_ID}"

    gcloud storage buckets create "gs://${TEST_BUCKET}" --project "${PROJECT_ID}" --location="US-WEST1"

    gcloud storage buckets add-iam-policy-binding "gs://${TEST_BUCKET}" \
        --member="serviceAccount:${TEST_SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com" --role=roles/storage.objectAdmin \
        --project "${PROJECT_ID}"

    trap kind_dump EXIT

    task capi-create-gke CLUSTER_NAME="buildkite-${BUILDKITE_BUILD_NUMBER}"

    task gke-get-kubeconfig KUBECONFIG=$(realpath ".local/buildkite-${BUILDKITE_BUILD_NUMBER}-gke-cluster.conf")
    KUBECONFIG=$(realpath ".local/buildkite-${BUILDKITE_BUILD_NUMBER}-gke-cluster.conf")
    export KUBECONFIG

    envsubst < ./charts/redpanda/ci/22-eks-tiered-storage-with-creds-values.yaml.tpl > ./charts/redpanda/ci/22-eks-tiered-storage-with-creds-values.yaml
}

test_"${CLOUD_PROVIDER}"

# install cert-manager
task install-cert-manager
